====== Explanation of the HTML File ======

This is a walk-through of the contents of the HTML file that Timeplot uses. In particular, it walks you through the Javascript in the file. 
\\
\\
\\
\\
\\
\\
\\
===== Start of File and External Javascript =====

At the top of the file, you will see code to begin the HTML page and call an external Javascript file. This code is required for your Timeplot to work. You shouldn't edit or change the code or the URL. 

<code html>
<html>
<head>

<!-- This is the call to the timeline's API code. You should not edit it. -->
<script src="http://api.simile-widgets.org/timeplot/1.1/timeplot-api.js" type="text/javascript"></script>

</code>

===== Javascript =====

Below the call to the external javascript, you will see a block of javascript that contains information about the Timeplot to be displayed on the page. It begins with a tag to start the script: 

<code html>
<!-- This tag indicates the start of the javascript block -->
<script>
</code>

The majority of your work will be editing and modifying the block of code that follows. Comments in the code help to explain what each piece does. Subsequent tutorials will further explain this code as well as introduce other code you can add to modify and enhance your Timeplot. 

<code javascript>
// This declares a variable for your Timeplot. You should not edit it
   var timeplot;
 
     //This begins the primary function that controls your Timeplot. 
     //It is referenced in the body tag of the HTML code below
     function onLoad() {
 
       // This declares a variable for your data source.
       var eventSource = new Timeplot.DefaultEventSource();
       var eventSource2 = new Timeplot.DefaultEventSource();
       
       // This variable contains information about how the x-axis (dates) is displayed
        var timeGeometry = new Timeplot.DefaultTimeGeometry({
                gridColor: "#000000",
                axisLabelsPlacement: "bottom"
        });

		// This variable contains information about hwo the y-axis (values) is displayed
        var valueGeometry = new Timeplot.DefaultValueGeometry({
                gridColor: "#000000",
                axisLabelsPlacement: "left",
                min: 0, 
                max: 300000
        });
 
       // The next three blocks of code declare variables for each line (data set) and your events
       // For each line there are several properties already declared.
       // You may modify or add to these variables and their properties depending on how you want your Timeplot to work.
       var plotInfo = [
           Timeplot.createPlotInfo({
               id: "City1",
               dataSource: new Timeplot.ColumnSource(eventSource,1),
               valueGeometry: valueGeometry,
               timeGeometry: timeGeometry, 
               lineColor: "#ff0000",
               showValues: true
           }),
           
            Timeplot.createPlotInfo({
               id: "City2",
               dataSource: new Timeplot.ColumnSource(eventSource,2),
               valueGeometry: valueGeometry,
               timeGeometry: timeGeometry,
               lineColor: "#0000ff",
               showValues: true
           }), 
           
		   Timeplot.createPlotInfo({
			   id: "Events",
			   eventSource: eventSource2,
			   timeGeometry: timeGeometry, 
			   lineColor: "#000000"
			   })
       ];
 
  // This statement creates your Timeplot (using the plotInfo variable you created above) 
  timeplot = Timeplot.create(document.getElementById("myplot"), plotInfo);
 
  // This statement indicates where the text file is located for your data. 
  // The location is relative to the file you are working on, 
  // and the comma (in quotes) indicates that the data is comma-delimited (separated by commas) in the text file.
  timeplot.loadText("data.txt", ",", eventSource);
  timeplot.loadXML("events.xml", eventSource2);
 
 
}
 
  // This next variable and function are used to dynamically resize your Timeplot 
  // when the browser window is resided. You should not edit it. 
   var resizeTimerID = null;
      function onResize() {
        if (resizeTimerID == null) {
        resizeTimerID = window.setTimeout(function() {
            resizeTimerID = null;
            timeplot.repaint();
        }, 100);
     }
    }
 
</script>
</code>

Next, you will see a couple of tags to close the Javascript portion of the page as well as the head section. You should not edit or change these tags. 

<code html>
</script>
       
  </head>
</code>

=====HTML=====

Below the head section, is the start of the actual body of the page. 

<code html>
<!-- This next tag starts the beginning of the actual HTML of the page.-->
<!-- You will notice it has two Javascript events attached to it. -->
<!-- These events will trigger the Javascript to actually run when the page loads or when it is resized.-->
<!-- You should not edit this portion of the code --> 
  <body onload="onLoad();" onresize="onResize();">
</code>

Next, we see a HTML "div" tag which is the container that will actually display your Timeplot. 

<code html>
<!-- This div tag becomes the container for your Timeplot.-->
<!-- The "id" here must match the Javascript statement above that creates the Timeplot.-->
<!-- The style information can be modified to change the size and/or border around the Timeplot. -->
  <div id="myplot" style="height: 150px; border: 1px solid #aaa"></div>
</code>

=====End of File=====
Finally, there are tags to close the entire body of the file and the entire HTML block. 

<code html>
 </body>
 
</html>
</code>


{{indexmenu_n>3}}