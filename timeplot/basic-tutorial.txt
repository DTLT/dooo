====== Basic Tutorial ======

So in this tutorial we will be using the data that was automatically installed in your directory through Installatron. 

First log into your domain of one's own account at [[http://www.umwdomains.com|umwdomains.com]].

{{:timeplot:umwdomains_homepage.png?300|}} {{:timeplot:umwdomains_login_page.png?275|}}

In the Dashboard, scroll down and click on the File Manager. Then select "Web Root" from the pop up window and click "Go". You may want to review the tutorial on the file manager [[http://docs.umwdomains.com/cpanel/accessing-your-files-through-the-file-manager|here]].

{{:timeplot:screen_shot_2014-07-02_at_4.37.05_pm.png?300|}}{{:timeplot:filemanager_pop_up.png?280|}}


Once inside find the file folder for your timeplot, it should look something like this, double click and open the folder.

{{:timeplot:inside_file_manager.png?300|}}

Inside you should see three types of files; a ".txt", a ".xml", and a ".html". Each on of these files is necessary to the running of the program. The .txt will house your raw data, the .xml holds your event dates and information, and the .html is the program code.

{{:timeplot:timeplot_file.png?300|}}

You will need to click on the individual files and then select code editor from the top tool bar of the file manager to edit the files.

{{:timeplot:code_editor.png?400|}}

I am going to walk you through the basic file that will produce a good example and basic understanding of the program works.

So this is is the code you should see when you open the "index.html" file:



	<head>
	
	<!-- This is the call to the timeline's API code -->
	
	  <script src="http://api.simile-widgets.org/timeplot/1.1/timeplot-api.js" 
       type="text/javascript"></script>
       
       <script>
 
var timeplot;

function onLoad() {
 var eventSource = new Timeplot.DefaultEventSource();
 
   var timeGeometry = new Timeplot.DefaultTimeGeometry({
    gridColor: new Timeplot.Color("#000000"),
    axisLabelsPlacement: "top"
  });

  var valueGeometry = new Timeplot.DefaultValueGeometry({
    gridColor: "#000000",
    min: 0,
    max: 100
  });
  
  var eventSource2 = new Timeplot.DefaultEventSource();
  
  <!--This is the code for the first plotgraph-->
  
  var plotInfo = [
    Timeplot.createPlotInfo({
      id: "plot1",
      dataSource: new Timeplot.ColumnSource(eventSource,1),
      
      timeGeometry: timeGeometry,
      valueGeometry: valueGeometry,
      
      <!--These are the colors of your first graph-->
      
      lineColor: "#ff000",
      fillColor: "#cc8080",
      showValues: true
}),

    <!--This is for your second graph-->
    
      Timeplot.createPlotInfo({
      id: "plot2",
      dataSource: new Timeplot.ColumnSource(eventSource,3),
      timeGeometry: timeGeometry,
      valueGeometry: valueGeometry,
      
      <!--These are the colors of your second graph-->
      
      lineColor: "#D0A825",
      showValues: true
    }),
    
    <!--This is code for the third graph / the events in this example-->
    
   Timeplot.createPlotInfo({
      id: "plot3",
      timeGeometry: timeGeometry,
      eventSource: eventSource2,
      
      <!--This is the color for the event lines-->
      
      lineColor: "#03212E"
      
    })
    
  ];
  
 
  <!-- This is the area where you specifly your graphs to get information from -->          
  
  timeplot = Timeplot.create(document.getElementById("plot1"), plotInfo);
  timeplot.loadText("data.txt", ",", eventSource);
  timeplot.loadXML("events.xml", eventSource2);
}

var resizeTimerID = null;
function onResize() {
    if (resizeTimerID == null) {
        resizeTimerID = window.setTimeout(function() {
            resizeTimerID = null;
            timeplot.repaint();
        }, 100);
    }
}


</script>
       
  </head>

  

  <body onload="onLoad();" onresize="onResize();">
  
  <div id="plot1" style="height: 150px; border: 1px solid #aaa"></div>
  
 </body>


