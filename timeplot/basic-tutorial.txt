====== Basic Tutorial ======

This tutorial will use the installation package that was covered in the previous with the base file.[[timeplot:installation|Installation]] tutorial.

**A few things to note:**

This is a walk through of the code of the program in the HTML Javascript file. It has been labeled for your convenience. Please follow these instructions **exactly** as they are and ignore areas that are not labeled. Any changes to the code that is unintentional or in unspecified areas can cause it to not work. It is recommended that you copy and paste your code into a file on your computer to create backups incase you need to revert to a previous version. The code editor will allow you to use control / command Z to undo your changes, but once you close the code editor you can no longer do that. 


To make changes to the code for your timeplot, you will need to click on the individual files and then select **code editor** from the top toolbar of the file manager to edit the files.

{{  :timeplot:code_editor.png?  |}}


A pop up window will appear, leave the settings as is and click edit in the bottom left corner. 

{{  :timeplot:pop-up_window.png?500  |}}



To view the timeplot as you edit the code you can type "www.mydomain.com/timeplot" and your browser will open that file, run the timeplot code, and display the graph. 

This is what you should see to start with in the basic file. 

{{:timeplot:starting_timeplot.png|}}


===== Adding Data =====

To get started we need to specify to the program where our raw data is and how to read that raw data so it will be read into the program. To tell the program we need to add a few lines of code to the program. With your installation package you were given a sample raw data text file and we will use that. This is where your HTML file and your text file interact. 

Later if you decide to use your own data file there are some adjustments you may have to make here. You must make sure that the file is in in the same folder in the file manager and that your file name is spelled exactly as it appears in the file manager folder. You may also have to specify the delimiter, the comma in the parenthesis in the code. Please see more information in the [[timeplot:explanation-of-the-text-file|Explanation of the Text File]] to see how the text file is set up and more information on how the two files interact.

<code> 
  var eventSource = new Timeplot.DefaultEventSource();

  dataSource: new Timeplot.ColumnSource(eventSource,1),

  timeplot.loadText("data.txt", ",", eventSource);
</code>

Place this line of code as show below.



{{:timeplot:adding_data_lines_of_code.png|}}


This is what your timeplot should look like now that you have added those lines of code.

{{:timeplot:timeplot_w_sample_data.png|}}

===== Adjusting The Graph =====

The next step is to enable the axis values so that you can get a better sense of the data in the graph and visualize what is going on.

To add the Y-axis labels, place this code into the individual graphs code. Like this:

<code>

gridColor: "#000000"
axisLabelsPlacement: "left",

</code>

{{:timeplot:adding_y-axis_labels.png|}}

To enable to X-Axis label, add this code into the individual graph's code like this.



<code>

      timeGeometry: new Timeplot.DefaultTimeGeometry({
      gridColor: "#000000",
      axisLabelsPlacement: "top"
      })

</code>

{{:timeplot:adding_x-axis_labels.png|}}

This is what your graph should look like at this step:

{{:timeplot:graph_without_min-max.png|}}

If you notice the graph may seem a little off. The X-Axis as default will be your lowest value. This fundamentally frames the data different and may project a different story from the data. It can make changes look more extreme than they really are. Sometimes it can be helpful to do that, other times it can be misleading.

By adding this line of code you will manually set the minimum and maximum values of the graph. You add different values later to better fit your graph for different projects.

So to adjust your graphs minimum and maximum values what you need to do is to paste this code into the graph code. 

<code>

        min: 0,
        max: 100

</code>

{{:timeplot:where_to_add_the_min-max.png|}}



This will result in your graph looking like this.

{{:timeplot:graph_with_min-max.png|}}




===== Adding Colors ======

Here are a few basic options that can help the readability of the graph; adding colors and showing the data points when you put the mouse over the graph.

In the individual graph code add these lines of code to color the graph. "lineColor" will color the graph's line and "fillColor" will color the area under the graph. The timeplot program uses hexadecimal code to specify the color of certain elements of the graph to the program. It is very helpful to use a hexadecimal visualizer so that you can see the color you want and then get the code. For example w3schools has a very helpful HTML color picker.  [[http://www.w3schools.com/tags/ref_colorpicker.asp|You can find the link here]] to get different "Hex" values for colors. 

<code>

      lineColor: "#000000",
      fillColor: "#900000",

</code>

{{:timeplot:where_to_add_color_code.png|}}

To show the values of your data points when you put your mouse over the graph, add this code below the colors that we just added above.

<code>

showValues: true,

</code>

{{:timeplot:where_to_add_mouse_over.png|}}


This is what your graph will look like after adding color and the mouse over code.

{{:timeplot:color_and_mouse_over_graph.png|}}


===== Adding Events =====

To add events to your graph you need to add a few blocks of codes in different places.


At the top of the program you will also have to set another variable to create the events graph.

<code>

var eventSource2 = new Timeplot.DefaultEventSource();

</code>

{{:timeplot:create_variable.png|}}

To create the XML events you need to create another instance of the graph code. 

Add this line of code near the bottom, make sure when you set the "id" that it is unique.

<code>

Timeplot.createPlotInfo({
      id: "events",
      gridColor: "#000000",
      axisLabelsPlacement: "top",
      eventSource: eventSource2,
      lineColor: "#0000000"
      
      })


</code>

{{:timeplot:create_plot.png|}}

Finally you also need to tell the program where to find the XML file with your events in it. Add this line of code near the bottom of the HTML file to specify where the file is. **The file name must match exactly!**

<code>

  timeplot.loadXML("events.xml", eventSource2);

</code> 

{{:timeplot:xml_data.png|}}


This concludes the basic tutorial. You now have the basic tools to create a timeplot and adjust some of the functions of timeplot. Please see the [[timeplot:advanced-tutorial|advanced tutorial]] for more options for timeplot.

{{indexmenu_n>6}}